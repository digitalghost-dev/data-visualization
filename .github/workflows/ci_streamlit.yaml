name: CI/CD - Streamlit App

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info

  push:
    paths-ignore:
      - '.github/**'
      - 'api/**'
      - 'etl/**'
      - 'prefect/**'
      - 'terraform/**'
      - 'CHANGELOG.md'
      - '.gitignore'
      - '.prefectignore'
      - '.pre-commit-config.yaml'
      - 'pyproject.toml'
      - 'README.md'
    branches:
      - "main"
        
env:
  GAR_LOCATION: us-central1
  VERSION_NUMBER: '2.8.0'
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGISTRY_REPO: ${{ secrets.REGISTRY_REPO }}
  REGISTRY_IMAGE: digitalghostdev/premier-league
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
  WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY: ${{ secrets.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}
  
jobs:

  snyk:
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Snyk
        uses: snyk/actions/python-3.10@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --skip-unresolved=true

      - name: Upload Result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  build-streamlit-image:
    runs-on: ubuntu-latest
    needs: [snyk]
    if: |
      always() &&
      (needs.snyk.result == 'success')
    
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          mkdir docker-context/.streamlit
          cp ./.dockerignore docker-context
          cp ./Dockerfile docker-context
          cp ./streamlit_app.py docker-context
          cp ./requirements.txt docker-context
          cp -r ./.streamlit/config.toml docker-context/.streamlit
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: ./docker-context
          tags: streamlit:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/streamlit.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: streamlit
          path: /tmp/streamlit.tar
          
  push-artifact-registry:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-streamlit-image]
    if: |
      always() &&
      (needs.build-streamlit-image.result == 'success')

    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: streamlit
          path: /tmp
          
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}'
          project_id: '${{ env.PROJECT_ID }}'
          
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
        
      - name: Load Image
        run: |
          docker load --input /tmp/streamlit.tar
          docker image ls -a
          
      - name: Tag Image
        run: |
          docker tag \
          streamlit:${{ env.VERSION_NUMBER }} \
          "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/streamlit:${{ env.VERSION_NUMBER }}"
          
      - name: Push Image
        run: |
          docker push \
          "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/streamlit:${{ env.VERSION_NUMBER }}"
          
  deploy-streamlit-image:
    permissions:
      contents: 'read'
      id-token: 'write'
    
    runs-on: ubuntu-latest
    needs: [push-artifact-registry]
    if: |
      always() &&
      (needs.push-artifact-registry.result == 'success')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}'
          project_id: '${{ env.PROJECT_ID }}'
          
      - name: Deploy Image
        id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v1'
        with: 
          service: streamlit
          image: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/streamlit:${{ env.VERSION_NUMBER }}"
          secrets: /app/.streamlit/secrets.toml=streamlit-secret:latest

  architecture-build:
    runs-on: ubuntu-latest
    needs: [snyk]
    if: |
      always() &&
      (needs.snyk.result == 'success')

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      
      - name: Build and Push by Digest
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export Digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
    
      - name: Upload Digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  
  create-manifest-and-push:
    runs-on: ubuntu-latest
    needs:
      - architecture-build

    steps:

      - name: Download Digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: ${{ env.VERSION_NUMBER }}
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
          
      - name: Create Manifest List and Push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
            
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  syft:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-streamlit-image]
    if: |
      always() &&
      (needs.build-streamlit-image.result == 'success')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: streamlit
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/streamlit.tar
          docker image ls -a
          
      - name: Create and Upload SBOM
        uses: anchore/sbom-action@v0
        with:
          image: streamlit:${{ env.VERSION_NUMBER }}
          artifact-name: streamlit-sbom-${{ env.VERSION_NUMBER }}.spdx.json
          upload-artifact: true

  grype:
    permissions:
      actions: read
      contents: read
      security-events: write

    runs-on: ubuntu-latest
    needs: [syft]

    if: |
      always() &&
      (needs.syft.result == 'success')
    steps:
    
      - name: Download SBOM
        uses: actions/download-artifact@v3
        with:
          name: streamlit-sbom-${{ env.VERSION_NUMBER }}.spdx.json
          
      - name: Scan SBOM
        uses: anchore/scan-action@v3
        id: scan
        with:
          sbom: streamlit-sbom-${{ env.VERSION_NUMBER }}.spdx.json
          fail-build: false
          output-format: sarif
          severity-cutoff: critical
          
      - name: Upload SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
  