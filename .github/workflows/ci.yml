name: CI Pipeline

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - debug
        - warning
        - error
        - critical
        
  push:
    paths-ignore:
      - '.github/**'
      - '.streamlit/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
      - 'streamlit_app.py'
      - 'style.css'
    branches:
      - "main"

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GAR_LOCATION: us-central1
  REGISTRY_REPO: ${{ secrets.REGISTRY_REPO }}
  USERNAME: ${{ secrets.USERNAME }}
  EMAIL: ${{ secrets.EMAIL }}

jobs:
    
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.check.outputs.exit_code }}

    steps:
    
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Install Black
        run: python -m pip install black
        
      - name: Check Black Formatting
        id: check
        run: |
          black data/locations/locations.py --check || exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
  black-formatting:
    runs-on: ubuntu-latest
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.exit_code == 1 }}
    
    steps:
    
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Install Black
        run: python -m pip install black
        
      - name: Apply Black Formatting
        run: black data/locations/locations.py
        
      - name: Commit Changes
        run: |
          git config --local user.email "${{ env.EMAIL }}"
          git config --local user.name "${{ env.USERNAME }}"
          git add black_test.py
          git commit -m "Apply Black Formatting" --allow-empty
          git push
          
  lint:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        
      - name: Install Dependencies
        run: pip install pylint
        
      - name: Run Pylint
        continue-on-error: true
        run: pylint data/locations/locations.py
        
  build-locations:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: locations:test
          outputs: type=docker,dest=/tmp/locations.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: locations
          path: /tmp/locations.tar
          
  deploy-locations:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-locations]
    if: |
      always() &&
      (needs.build-locations.result == 'success')
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: locations
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/locations.tar
          docker image ls -a
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
          
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          
      - name: Build and Push Container
        run: |-
          docker tag locations:test "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/locations:test"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/locations:test"
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'spencercorwin/deploy-cloudrun@enable-jobs'
        with:
          job: locations_test
          gcloud_component: beta
          region: ${{ env.GAR_LOCATION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/locations:test

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
