name: CI Pipeline

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - debug
        - warning
        - error
        - critical
        
  push:
    paths-ignore:
      - '.github/**'
      - '.streamlit/**'
      - 'api/**'
      - 'pages/**'
      - 'CHANGELOG.md'
      - 'Dockerfile'
      - '.dockerignore'
      - '.gitignore'
      - '.pylintrc'
      - 'README.md'
      - 'streamlit_app.py'
      - 'style.css'
    branches:
      - "main"

  pull_request:
    branches-ignore:
      - '2.*'
      - '3.*'
      - '4.*'

env:
  GAR_LOCATION: us-central1
  VERSION_NUMBER: '2.5'
  CLOUD_BUCKET: ${{ secrets.CLOUD_BUCKET }}
  EMAIL: ${{ secrets.EMAIL }}
  NAME: ${{ secrets.NAME }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGISTRY_REPO: ${{ secrets.REGISTRY_REPO }}
  WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
  WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY: ${{ secrets.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}
  WIF_SERVICE_ACCOUNT_CLOUD_STORAGE: ${{ secrets.WIF_SERVICE_ACCOUNT_CLOUD_STORAGE }}
  

jobs:
    
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.check.outputs.exit_code }}

    steps:
    
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Install Black
        run: python -m pip install black
        
      - name: Check Black Formatting
        id: check
        run: |
          black data/ --check || exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

  black-formatting:
    runs-on: ubuntu-latest
    needs: [check-for-changes]
    if: ${{ needs.check-for-changes.outputs.exit_code == 1 }}
    
    steps:
    
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Install Black
        run: python -m pip install black
        
      - name: Apply Black Formatting
        run: black data/
        
      - name: Commit Changes
        run: |
          git config --local user.email "${{ env.EMAIL }}"
          git config --local user.name "${{ env.NAME }}"
          git add .
          git commit -m "Apply Black Formatting" --allow-empty
          git push
          
  pylint-check:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        
      - name: Install Dependencies
        run: pip install pylint
        
      - name: Run Pylint
        continue-on-error: true
        run: pylint data/ > pylint_output.txt

      - name: Upload Artifact	
        uses: actions/upload-artifact@v3	
        with:	
          name: pylint_output
          path: ./pylint_output.txt

  google-cloud-upload:
    runs-on: ubuntu-latest
    needs: [pylint-check]
    if: |
      always() &&
      (needs.pylint-check.result == 'success')

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: pylint_output
          path: .

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: ${{ env.WIF_SERVICE_ACCOUNT_CLOUD_STORAGE }}

      - id: 'upload-file'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: 'pylint_output.txt'
          destination: '${{ env.CLOUD_BUCKET }}'
        
  # stadiums container build and deploy --------------------------------------
  build-stadiums:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          cp -r ./data/stadiums/. docker-context
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: ./docker-context
          tags: stadiums:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/stadiums.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: stadiums
          path: /tmp/stadiums.tar
          
  deploy-stadiums:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-stadiums]
    if: |
      always() &&
      (needs.build-stadiums.result == 'success')

    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: stadiums
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/stadiums.tar
          docker image ls -a
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}'
          
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          
      - name: Build and Push Container
        run: |-
          docker tag stadiums:${{ env.VERSION_NUMBER }} "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/stadiums:${{ env.VERSION_NUMBER }}"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/stadiums:${{ env.VERSION_NUMBER }}"
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'digitalghost-dev/deploy-cloudrun@enable-jobs'
        with:
          job: pl-stadiums
          gcloud_component: beta
          region: ${{ env.GAR_LOCATION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/stadiums:${{ env.VERSION_NUMBER }}

  # players container build and deploy --------------------------------------
  build-players:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          cp -r ./data/players/. docker-context
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: ./docker-context
          tags: players:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/players.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: players
          path: /tmp/players.tar
          
  deploy-players:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-players]
    if: |
      always() &&
      (needs.build-players.result == 'success')

    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: players
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/players.tar
          docker image ls -a
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}'
          
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          
      - name: Build and Push Container
        run: |-
          docker tag players:${{ env.VERSION_NUMBER }} "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/players:${{ env.VERSION_NUMBER }}"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/players:${{ env.VERSION_NUMBER }}"
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'digitalghost-dev/deploy-cloudrun@enable-jobs'
        with:
          job: pl-players
          gcloud_component: beta
          region: ${{ env.GAR_LOCATION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/players:${{ env.VERSION_NUMBER }}

  # standings container build and deploy --------------------------------------
  build-standings:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          cp -r ./data/standings/. docker-context
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: ./docker-context
          tags: standings:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/standings.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: standings
          path: /tmp/standings.tar
          
  deploy-standings:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-standings]
    if: |
      always() &&
      (needs.build-standings.result == 'success')

    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: standings
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/standings.tar
          docker image ls -a
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}'
          
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          
      - name: Build and Push Container
        run: |-
          docker tag standings:${{ env.VERSION_NUMBER }} "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/standings:${{ env.VERSION_NUMBER }}"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/standings:${{ env.VERSION_NUMBER }}"
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'digitalghost-dev/deploy-cloudrun@enable-jobs'
        with:
          job: pl-standings
          gcloud_component: beta
          region: ${{ env.GAR_LOCATION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/standings:${{ env.VERSION_NUMBER }}

  # teams container build and deploy --------------------------------------
  build-teams:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          cp -r ./data/teams/. docker-context
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: ./docker-context
          tags: teams:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/teams.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: teams
          path: /tmp/teams.tar
          
  deploy-teams:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-teams]
    if: |
      always() &&
      (needs.build-teams.result == 'success')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: teams
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/teams.tar
          docker image ls -a
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}'
          
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          
      - name: Build and Push Container
        run: |-
          docker tag teams:${{ env.VERSION_NUMBER }} "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/teams:${{ env.VERSION_NUMBER }}"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/teams:${{ env.VERSION_NUMBER }}"
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'digitalghost-dev/deploy-cloudrun@enable-jobs'
        with:
          job: pl-teams
          gcloud_component: beta
          region: ${{ env.GAR_LOCATION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/teams:${{ env.VERSION_NUMBER }}

  # fixtures container build and deploy --------------------------------------
  build-fixtures:
    runs-on: ubuntu-latest
    needs: [check-for-changes, black-formatting]
    if: |
      always() &&
      (needs.black-formatting.result == 'success' || needs.black-formatting.result == 'skipped')
      
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          cp -r ./data/fixtures/. docker-context
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: ./docker-context
          tags: fixtures:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/fixtures.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: fixtures
          path: /tmp/fixtures.tar
          
  deploy-fixtures:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-fixtures]
    if: |
      always() &&
      (needs.build-fixtures.result == 'success')
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: fixtures
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/fixtures.tar
          docker image ls -a
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}'
          
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          
      - name: Build and Push Container
        run: |-
          docker tag fixtures:${{ env.VERSION_NUMBER }} "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/fixtures:${{ env.VERSION_NUMBER }}"
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/fixtures:${{ env.VERSION_NUMBER }}"
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'digitalghost-dev/deploy-cloudrun@enable-jobs'
        with:
          job: pl-fixtures
          gcloud_component: beta
          region: ${{ env.GAR_LOCATION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/fixtures:${{ env.VERSION_NUMBER }}
